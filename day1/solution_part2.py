data = """951484596541141557316984781494999179679767747627132447513171626424561779662873157761442952212296685
57345231126344516323349319921138783846159463566669942298294778262331733368397843812326132686395971977717922859
93193211389484665627437615848361845129841316353541162648991819527482245239539764858162952279457925557261219133
44959454458829485471174415775278865324142733339789878929596275998341778873889585819916457474773252249179366599
95145418265722557627783466922298236688468856575469127374595946864895749851132621593435396398147159398461755451
45196237853268883747421473189934232148347517859569583951334866563884545527697225625244157159138699463255513966
38593398729938526424994348267935153555851552287223313383583669912941364344694725478258297498969517632881187394
14159347981853619459797651925421593225765377745522747761795783327346321659364239421527531473491471972661892317
79183426643519542526672532338588143653517229387166215442265989562577532122488592583513631747827423369614253253
81561575992352415514168782816173861148859478285339529151631429536819286498721812323861771638574344416879476255
92992915791298415174261326875477968539612595459531813493336662659449824995638877172377724277265467844881584455
53728925747477356723682998265482547443593776672947645593346595232331465875682611162531551893941886968316912847
11264872914348961888253386971994431352474717376878745948769171243242621219912378731755544387249443997382399714
73835185775232936799766516695646754445981758291547851448654145393217559841355425967211736486311259251598892274
71648426683619251355512489234499683283858898775121569527251986917469514314434974964557615164865734761853217485
23644283494181119399874324683922393547682851931435931276267766772798261563117954648576421741384823494187895272
58257566968527998698835779613879432612585277299544635572321116152316188622256285354648841156347399863384795324
67875571461876969478313357228889181729612564989718689462372995234748419835273914899623571964339272517987643624
93965894995592683296651874787384247326643886774966828657393717626591578321174832222434128817871765347278152799
42556563352115264368622141112946342549642538551671968288415745277214158574316664719193872797136627435787425216
6721759""".replace("\n", "")

examples = [("1212", 6),
            ("1221", 0),
            ("123425", 4),
            ("123123", 12),
            ("12131415", 4)]


def matching_halfway_sum(captcha):
    summed = 0
    captcha_len = len(captcha)
    halfway = captcha_len//2
    for i, c in enumerate(captcha):
        if c == captcha[(i + halfway) % captcha_len]:
            summed += int(c)
    return summed


# check examples
for e in examples:
    if not matching_halfway_sum(e[0]) == e[1]:
        print("Wrong answer!")

# get solution
print(matching_halfway_sum(data))
